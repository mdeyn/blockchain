// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SpecialtyCoffeeDapp {
    struct Coffee {
        address producer;
        string name;
        uint256 quantity;
        uint256 price; // in wei
        bool available;
    }

    mapping(uint256 => Coffee) public coffees;
    uint256 public nextCoffeeId;

    event CoffeeListed(uint256 id, address indexed producer, string name, uint256 quantity, uint256 price);
    event CoffeePurchased(uint256 id, address indexed buyer, uint256 quantity);

    function listCoffee(string memory _name, uint256 _quantity, uint256 _price) external {
        require(_quantity > 0, "Quantity must be greater than zero");
        require(_price > 0, "Price must be greater than zero");

        coffees[nextCoffeeId] = Coffee(msg.sender, _name, _quantity, _price, true);
        emit CoffeeListed(nextCoffeeId, msg.sender, _name, _quantity, _price);
        nextCoffeeId++;
    }

    function purchaseCoffee(uint256 _id, uint256 _quantity) external payable {
        Coffee storage coffee = coffees[_id];
        require(coffee.available, "Coffee is not available");
        require(_quantity > 0 && _quantity <= coffee.quantity, "Invalid quantity");
        require(msg.value == coffee.price * _quantity, "Incorrect amount sent");

        coffee.quantity -= _quantity;
        if (coffee.quantity == 0) {
            coffee.available = false;
        }

        payable(coffee.producer).transfer(msg.value); // Send payment to the producer
        emit CoffeePurchased(_id, msg.sender, _quantity);
    }
}

